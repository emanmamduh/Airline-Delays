shiny::runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("toggleButton", "Toggle Mode"),
tags$head(
tags$style(HTML("
body.dark-mode {
background-color: #222;
color: #fff;
}
"))
)
)
server <- function(input, output) {
observeEvent(input$toggleButton, {
shinyjs::runjs('$("body").toggleClass("dark-mode");')
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyjs)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
actionButton("toggleButton", "Toggle Mode"),
tags$head(
tags$style(HTML("
body.dark-mode {
background-color: #222;
color: #fff;
}
"))
)
)
)
server <- function(input, output) {
observeEvent(input$toggleButton, {
shinyjs::runjs('$("body").toggleClass("dark-mode");')
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
''
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
